" Plugins are managed by vundle
source ~/.vundle
source ~/.fzf

syntax enable
filetype plugin indent on

let mapleader = ','
set clipboard=unnamed

" Nice colors
set background=dark
let g:solarized_termcolors=256
colorscheme solarized

set number
set ruler

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set expandtab

" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,coverage/*

" Status bar
set laststatus=2

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" make and python use real tabs
au FileType make                                     set noexpandtab
au FileType python                                   set noexpandtab

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Use modeline overrides
set modeline
set modelines=10

" Disable arrow keys
noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>

" BEEEEEPPPP
set visualbell

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} map <buffer> <Leader>p :Mm <CR>

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.txt call s:setupWrapping()

" syntax for markdown files
au BufNewFile,BufRead *.md set filetype=better-writing

" Switch between buffers
nnoremap <leader><leader> <c-^>

" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Consider characters after 80 as errors
match ErrorMsg '\%>80v.\+'

" configure syntastic and go-vim
let g:go_fmt_command = "goimports"
let g:go_template_autocreate = 0
let g:syntastic_go_checkers = ['govet', 'errcheck', 'golint']
"let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" configure syntastic for rust.vim
let g:syntastic_rust_rustc_exe = 'cargo check'
let g:syntastic_rust_rustc_fname = ''
let g:syntastic_rust_rustc_args = '--'
let g:syntastic_rust_checkers = ['rustc']
let g:rustfmt_autosave = 1

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_balloons = 0

let g:syntastic_ruby_mri_exec = '~/.rbenv/shims/ruby'
